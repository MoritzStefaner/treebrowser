package eu.stefaner.flareextensions {	import flash.display.LoaderInfo;	import flare.util.Property;	import flare.util.Stats;	import org.osflash.thunderbolt.Logger;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.utils.getDefinitionByName;	/**	 * @author mo	 */	public class Helpers {		public static function normalize(sourcePropertyString : String, targetPropertyString : String, dataList : *) : void {			var sourceProperty : Property = new Property(sourcePropertyString);			var targetProperty : Property = new Property(targetPropertyString);			var values : * = [];			for each (var n:* in dataList) {				try {					values.push(sourceProperty.getValue(n));				} catch(error : Error) {					Logger.warn("error getting property ", sourceProperty);				}			}			var s : Stats = new Stats(values);			var min : Number = s.minimum;			var max : Number = s.maximum;			for each (var n:* in dataList) {				try {					targetProperty.setValue(n, (sourceProperty.getValue(n) - min) / (max - min));				} catch(error : Error) {					Logger.warn("error setting property ", sourceProperty);				}			}		}		public static function normalizeMax(sourcePropertyString : String, targetPropertyString : String, dataList : *) : void {			var sourceProperty : Property = new Property(sourcePropertyString);			var targetProperty : Property = new Property(targetPropertyString);			var values : * = [];			for each (var n:* in dataList) {				try {					values.push(sourceProperty.getValue(n));				} catch(error : Error) {					Logger.warn("error getting property ", sourceProperty);				}			}			var s : Stats = new Stats(values);			var max : Number = s.maximum;			for each (var n:* in dataList) {				try {					targetProperty.setValue(n, (sourceProperty.getValue(n)) / max);				} catch(error : Error) {					Logger.warn("error setting property ", sourceProperty);				}			}		}		public static function normalizeTogether(sourceProperties : Array, targetProperties : Array, dataList : *) : void {			var values : * = [];			for each (var n:* in dataList) {				try {					for each (var sourcePropertyString:String in sourceProperties) {						var sourceProperty : Property = new Property(sourcePropertyString);						values.push(sourceProperty.getValue(n));					}				} catch(error : Error) {					Logger.warn("error getting property ", sourceProperty);				}			}			var s : Stats = new Stats(values);			var min : Number = s.minimum;			var max : Number = s.maximum;			Logger.info("minmax", min, max);			for each (var n:* in dataList) {				try {					for (var i : int = 0; i < sourceProperties.length; i++) {						var sourceProperty : Property = new Property(sourceProperties[i]);						var targetProperty : Property = new Property(targetProperties[i]);						targetProperty.setValue(n, (sourceProperty.getValue(n) - min) / (max - min));					}				} catch(error : Error) {					Logger.warn("error setting property ", targetProperty);				}			}		}		public static function getURL(s : String, target : String = "_blank") : void {			try {				navigateToURL(new URLRequest(s), target);				// second argument is target			} catch (e : Error) {				trace("Error getting URL", s);			}		}		public static function getClass(name : String) : Class {			return getDefinitionByName(name) as Class;		}		public static function playsBackLocally(loaderInfo : LoaderInfo) : Boolean {			return loaderInfo.url.indexOf("file") == 0;		}	}}