package eu.stefaner.organicedunet.semanticsearch.treeexplore_vertical {	import eu.stefaner.organicedunet.semanticsearch.NodeData;	import flare.display.TextSprite;	import flare.vis.data.NodeSprite;	import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFormat;	/**	 * @author mo	 */	public class Node extends NodeSprite {		private var label : TextSprite;		private var bg : Sprite;		public var label_tf : TextField;		//private var label : TextSprite;		public function Node(d : NodeData) {			data = d;			init();			mouseChildren = false;		}		public function init() : void {						//initLabel();			/*			addChild(bg = createBackground());			bg.width = label.width;			bg.height = label.height;			bg.x = -bg.width * .5;			bg.y = -bg.height * .5;			 * 			 */			label_tf.htmlText = (data as NodeData).label;			updateLayout();		}		public function updateLayout() : void {			label_tf.width = 500;			label_tf.width = Math.min(100, label_tf.textWidth) + 10;			label_tf.height = label_tf.textHeight + 5;			label_tf.width = Math.min(label_tf.width, label_tf.textWidth) + 10;			label_tf.x = -label_tf.width * .5;			label_tf.y = -label_tf.height * .5;			size = Math.pow(width, 2);		}		private function createBackground() : Sprite {			var s : Sprite = new Sprite();			s.graphics.beginFill(0xFFFFFF, .9);			s.graphics.drawRect(0, 0, 1, 1);			return s;		}		private function initLabel() : void {			var tf : TextFormat = new TextFormat("Arial", 11, 0x372D26);			label = new TextSprite((data as NodeData).label, tf, TextSprite.EMBED);			label.verticalAnchor = TextSprite.MIDDLE;			label.horizontalAnchor = TextSprite.CENTER;			addChild(label);		}		public function get scale() : Number {			return Math.max(scaleX, scaleY);		}		public function set scale(scale : Number) : void {			scaleX = scaleY = scale;		}	}}