package eu.stefaner.organicedunet.semanticsearch {	import flare.util.Strings;	import flare.vis.data.EdgeSprite;	import flare.vis.data.NodeSprite;	import com.adobe.serialization.json.JSON;	import org.osflash.thunderbolt.Logger;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.external.ExternalInterface;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.utils.Dictionary;	/**	 * @author mo	 */	public class DataConnector {		public var app : OEApp;		public var BASE_URL : String = "http://portal.organic-edunet.eu/";		//public var BASE_URL : String = "http://oe.dynalias.net/";		private var GET_STATE : String = "index.php?option=com_navigational&tmpl=component&task=getState&format=raw";		private var RESET : String = "index.php?option=com_navigational&tmpl=component&task=resetSession&format=raw";		private var ADD_INTEREST_POINT : String = "index.php?option=com_navigational&tmpl=component&task=addInterestPoint&format=raw&interestPoint={0}";		private var GET_FULL_TREE : String = "index.php?option=com_navigational&tmpl=component&task=listOntResourcesTranslated&format=raw";		private var SET_INTEREST_POINT : String = "index.php?option=com_navigational&tmpl=component&task=setInterestPoint&format=raw&interestPoint={0}";		private var SET_SEARCH_POINT : String = "index.php?option=com_navigational&tmpl=component&task=setSearchPoint&format=raw&searchPoint={0}";		private var GET_INTEREST_POINT : String = "index.php?option=com_navigational&tmpl=component&task=getInterestPoints&format=raw";		private var REMOVE_INTEREST_POINT : String = "index.php?option=com_navigational&tmpl=component&task=removeInterestPoint&format=raw&interestPoint={0}";		private var nodeForNodeData : Dictionary = new Dictionary();		private var nodeDataForID : Dictionary = new Dictionary();		private var edgeDataForType : Dictionary = new Dictionary();		private var OFFLINE_DEBUG : Boolean = false;		public var PROCESS_RELATIONS : Boolean = true;		public var UPDATE_SEARCHPOINTS : Boolean = false;		private var loadingCounter : Number = 0;		private var relationLabelByID : Dictionary = new Dictionary();
		private var firstCall : Boolean = true;
		public function DataConnector() {			initCallbacks();		}		public function startUp() : void {			if(OFFLINE_DEBUG ) {				loadStaticData();			} else {				//resetSession();				getFullTree();			}		}		private function initCallbacks() : void {			if(ExternalInterface.available) {				ExternalInterface.addCallback("changeSelection", changeSelection);			} else {				Logger.warn("ExternalInterface not available");			}		}		public function changeSelection(id : String) : void {			Logger.info("Flash received function call: changeSelection", id);			app.onInterestPointLoaded(getOrCreateNodeForNodeData(getOrCreateNodeDataForID(id)));		}		private function getFullTree() : void {			doRequest(BASE_URL + GET_FULL_TREE, onFullTreeLoaded);		}		private function onFullTreeLoaded(event : Event) : void {			Logger.info("full tree loaded", event.target.data);			var responseObject : * = JSON.decode(event.target.data);			if(app.ontology.root == null) {				app.ontology.root = app.ontology.addNode(getOrCreateNodeForNodeData(getOrCreateNodeDataForID("root")));			}						for each (var o:* in responseObject["ontResources"]) {				parseAndAddTreeNodeJSON(o);			}						//"ontProperties":[{"identifier":"affects","label":"afecta"},..; 						for each (var o:* in responseObject["ontProperties"]) {				Logger.info("parsing", o.identifier, o.label);				relationLabelByID[o.identifier] = o.label;				}						this.app.onOntologyLoaded();		}		private function loadStaticData() : void {			doRequest("data/root.json", onGetState);		}		public function loadMoreData(selectedNode : NodeSprite) : void {			if(OFFLINE_DEBUG ) {				loadStaticData();			} else {				//addInterestPoint((selectedNode.data as NodeData).id);				setInterestPoint((selectedNode.data as NodeData).id);			}			//this.app.onDataLoaded();		}		/*		// RESET		private function resetSession() : void {		doRequest(BASE_URL + RESET, onSessionReset);		}		private function onSessionReset(event : Event) : void {		Logger.info("session reset");		getState();		}		 */		// GET STATE		public function getState() : void {			Logger.info("getState");			doRequest(BASE_URL + GET_STATE, onGetState);		}		private function onGetState(event : Event) : void {			Logger.info("getState response");			var responseObject : * = JSON.decode(event.target.data);						for each (var o:* in responseObject["interestPoints"]) {				parseAndAddNodeJSON(o);			}						this.app.onDataLoaded();		}		// INTEREST POINTS		private function addInterestPoint(id : String) : void {			Logger.info("adding interest point for ", id);			doRequest(BASE_URL + Strings.format(ADD_INTEREST_POINT, encodeURIComponent(id).replace("%23", "--")), onInterestPointAddedOrSet);		}		private function setInterestPoint(id : String) : void {			Logger.info("setting interest point for ", id);						doRequest(BASE_URL + Strings.format(SET_INTEREST_POINT, encodeURIComponent(id).replace("%23", "--")), onInterestPointAddedOrSet);						if(UPDATE_SEARCHPOINTS) {				Logger.info("setting search point for ", id.split("#")[1]);				doRequest(BASE_URL + Strings.format(SET_SEARCH_POINT, id.split("#")[1]), onSearchPointSet);			}		}		public function getInterestPoints() : void {			doRequest(BASE_URL + GET_INTEREST_POINT, onInterestPointsLoaded);		}		private function onInterestPointAddedOrSet(event : Event) : void {			var success : Boolean = JSON.decode(event.target.data).successful;						if(success) {				Logger.info("added interest point");			} else {				Logger.warn("error adding interest point");			}						if(app.JSCallBack_selectionChange && !firstCall) {				ExternalInterface.call(app.JSCallBack_selectionChange, []);			} 			firstCall = false;						//getInterestPoints();			getState();		}		private function onSearchPointSet(event : Event) : void {			var success : Boolean = JSON.decode(event.target.data).successful;			if(success) {				Logger.info("search point set");				if(app.JSCallBack_searchPointUpdate) {					ExternalInterface.call(app.JSCallBack_searchPointUpdate);				}			} else {				Logger.warn("error setting search point");			}		}		private function onInterestPointsLoaded(event : Event) : void {			var ids : Array = JSON.decode(event.target.data).ontResources;			Logger.info("onInterestPointsLoaded", ids);			if(!ids || ids.length > 1 || ids.length == 0) {				app.onInterestPointLoaded(app.ontology.root);			} else {				app.onInterestPointLoaded(getOrCreateNodeForNodeData(getOrCreateNodeDataForID(ids[0])));			}		}		// DATA MANAGEMENT		private function parseAndAddNodeJSON(o : *) : NodeSprite {			var nd : NodeData = getOrCreateNodeDataForID(o.identifier);			var ns : NodeSprite = getOrCreateNodeForNodeData(nd);						// if no parent, attach to root			if(ns.parentNode == null) {				app.ontology.addChild(app.ontology.root, ns);			}			/*			// parse children			for each(var subelementID:String in o.subElements) {			var nd2 : NodeData = getOrCreateNodeDataForID(subelementID);			var ns2 : NodeSprite = getOrCreateNodeForNodeData(nd2);			if(!app.ontology.contains(ns2)) {			app.ontology.addNode(ns2);			app.ontology.addChild(ns, ns2);			}			}			 * 			 */			if(PROCESS_RELATIONS) {			// parse relations				for each(var relatedOntResource:* in o.relatedOntResources) {					var nd3 : NodeData = getOrCreateNodeDataForID(relatedOntResource.relatedOntResource);					var ns3 : NodeSprite = getOrCreateNodeForNodeData(nd3);					if(!app.ontology.contains(ns3)) {						app.ontology.addNode(ns3);					// adding children without parent to root node					// app.ontology.addChild(app.ontology.root, ns3);					}					var ed : EdgeData = getOrCreateEdgeDataForType(relatedOntResource.relationName);										if(!existsEdge(ns, ns3, ed)) {						app.ontology.addEdgeFor(ns, ns3, true, ed);					}				}			}			return ns;		}		private function parseAndAddTreeNodeJSON(o : *) : NodeSprite {			var nd : NodeData = getOrCreateNodeDataForID(o.identifier);			nd.label = o.label;			var ns : NodeSprite = getOrCreateNodeForNodeData(nd);			var parentId : String = o.parents[0];			var parentNode : NodeSprite ;			if(parentId) {				parentNode = getOrCreateNodeForNodeData(getOrCreateNodeDataForID(parentId));				if(!app.ontology.contains(parentNode)) app.ontology.addNode(parentNode);			} else {				// if no parent, attach to root				parentNode = app.ontology.root;			}									if(ns.parentNode != parentNode) {				app.ontology.addChild(parentNode, ns);			}						return ns;		}		private function existsEdge(ns1 : NodeSprite, ns2 : NodeSprite, ed : EdgeData) : Boolean {			var found : Boolean = false;			ns1.visitEdges(function(e : EdgeSprite):void {				if(e.other(ns1) == ns2 && e.data == ed) {					found = true;				}			}, NodeSprite.GRAPH_LINKS);			return found;		}		private function getOrCreateNodeForNodeData(nd : NodeData) : NodeSprite {			if(nodeForNodeData[nd] == null) {				nodeForNodeData[nd] = app.createNodeSprite(nd);			}			return nodeForNodeData[nd];		}		private function getOrCreateNodeDataForID(id : String) : NodeData {			if(nodeDataForID[id] == null) {				nodeDataForID[id] = new NodeData(id);			}			return nodeDataForID[id];		}		private function getOrCreateEdgeDataForType(type : String) : EdgeData {			if(edgeDataForType[type] == null) {				edgeDataForType[type] = new EdgeData(type, relationLabelByID[type]);			}			return edgeDataForType[type];		}		// HELPERS		private function doRequest(q : String, listener : Function = null) : void {			var loader : URLLoader = new URLLoader();			loader.load(new URLRequest(q));			onRequestStarted(loader);			if(listener) loader.addEventListener(Event.COMPLETE, listener);			loader.addEventListener(Event.COMPLETE, onRequestResponse);			loader.addEventListener(ErrorEvent.ERROR, onError);		}		private function onRequestResponse(event : Event) : void {			loadingCounter--;			updateLoadingState();		}		private function onRequestStarted(loader : URLLoader) : void {			loadingCounter++;			updateLoadingState();		}		private function updateLoadingState() : void {			app.showLoading(loadingCounter > 0);		}		private function onError(event : ErrorEvent) : void {			Logger.warn("error loading data", event.text);		}		// RANDOM DATA 				/*		private function getRandomConnectedTree() : Tree {			var t : Tree = new Tree();						var maxNumChildren : int = 10;			var maxDepth : int = 3;			var root : NodeSprite = t.addNode(new NodeData("1"));			t.root = root;						var nodesStack : Array = [root];			while (nodesStack.length) {				var currentNode : NodeSprite = NodeSprite(nodesStack.shift());				if(currentNode.depth < maxDepth) {					var numChildren : Number = currentNode.depth == 0 ? 5 : Math.floor(Math.random() * Math.random() * maxNumChildren) + 1;					for (var i : int = 0;i < numChildren;i++) {						var nd : NodeData = new NodeData(currentNode.data.label + "." + i);						var n : NodeSprite = t.addNode(nd);						t.addChild(currentNode, n);						nodesStack.push(n);					}				}			}						createRandomConnections(t);						return t;		}		private function createRandomConnections(t : Tree) : void {						var relations : Array = [new EdgeData("1"), new EdgeData("2"), new EdgeData("3"), new EdgeData("4")];						for each (var node : NodeSprite in t.nodes) {				for each (var node2 : NodeSprite in t.nodes) {					if(Math.random() > .99) {						var e : EdgeData = relations[Math.floor(Math.random() * relations.length)];						var es : EdgeSprite = t.addEdgeFor(node, node2, true, e);						es.visible = false;					}				}				}		}		 * 		 * 		 */	}}